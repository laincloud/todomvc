// Code generated by go-swagger; DO NOT EDIT.

package todo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"go.uber.org/zap"

	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/go-xorm/xorm"
	"github.com/laincloud/todomvc/util"
)

// GetTodoHandlerFunc turns a function with the right signature into a get todo handler
type GetTodoHandlerFunc func(GetTodoParams, *xorm.Engine, *zap.Logger) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTodoHandlerFunc) Handle(params GetTodoParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
	return fn(params, db, logger)
}

// GetTodoHandler interface for that can handle valid get todo params
type GetTodoHandler interface {
	Handle(GetTodoParams, *xorm.Engine, *zap.Logger) middleware.Responder
}

// NewGetTodo creates a new http.Handler for the get todo operation
func NewGetTodo(ctx *middleware.Context, handler GetTodoHandler, db *xorm.Engine, logger *zap.Logger) *GetTodo {
	return &GetTodo{Context: ctx, Handler: handler, db: db, logger: logger}
}

/*GetTodo swagger:route GET /todos/{id} todo getTodo

Get a todo item

*/
type GetTodo struct {
	Context *middleware.Context
	Handler GetTodoHandler
	db      *xorm.Engine
	logger  *zap.Logger
}

func (o *GetTodo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTodoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	logger := util.FromContext(r.Context(), o.logger)

	res := o.Handler.Handle(Params, o.db, logger) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
