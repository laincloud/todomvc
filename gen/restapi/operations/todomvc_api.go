// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-xorm/xorm"
	"go.uber.org/zap"

	"github.com/laincloud/todomvc/gen/restapi/operations/ping"
	"github.com/laincloud/todomvc/gen/restapi/operations/static"
	"github.com/laincloud/todomvc/gen/restapi/operations/todo"
)

// NewTodomvcAPI creates a new Todomvc instance
func NewTodomvcAPI(spec *loads.Document) *TodomvcAPI {
	return &TodomvcAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		HTMLProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("html producer has not yet been implemented")
		}),
		JsProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("js producer has not yet been implemented")
		}),
		StaticBundleJsHandler: static.BundleJsHandlerFunc(func(params static.BundleJsParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
			return middleware.NotImplemented("operation StaticBundleJs has not yet been implemented")
		}),
		TodoCreateTodoHandler: todo.CreateTodoHandlerFunc(func(params todo.CreateTodoParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
			return middleware.NotImplemented("operation TodoCreateTodo has not yet been implemented")
		}),
		TodoDeleteTodoHandler: todo.DeleteTodoHandlerFunc(func(params todo.DeleteTodoParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
			return middleware.NotImplemented("operation TodoDeleteTodo has not yet been implemented")
		}),
		TodoGetTodoHandler: todo.GetTodoHandlerFunc(func(params todo.GetTodoParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
			return middleware.NotImplemented("operation TodoGetTodo has not yet been implemented")
		}),
		StaticIndexHTMLHandler: static.IndexHTMLHandlerFunc(func(params static.IndexHTMLParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
			return middleware.NotImplemented("operation StaticIndexHTML has not yet been implemented")
		}),
		TodoListTodosHandler: todo.ListTodosHandlerFunc(func(params todo.ListTodosParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
			return middleware.NotImplemented("operation TodoListTodos has not yet been implemented")
		}),
		PingPingHandler: ping.PingHandlerFunc(func(params ping.PingParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
			return middleware.NotImplemented("operation PingPing has not yet been implemented")
		}),
		TodoUpdateTodoHandler: todo.UpdateTodoHandlerFunc(func(params todo.UpdateTodoParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
			return middleware.NotImplemented("operation TodoUpdateTodo has not yet been implemented")
		}),
	}
}

/*TodomvcAPI A demo app for LAIN */
type TodomvcAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/vnd.laincloud.todomvc.v1+json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/vnd.laincloud.todomvc.v1+json" mime type
	JSONProducer runtime.Producer
	// HTMLProducer registers a producer for a "text/html" mime type
	HTMLProducer runtime.Producer
	// JsProducer registers a producer for a "text/javascript" mime type
	JsProducer runtime.Producer

	// StaticBundleJsHandler sets the operation handler for the bundle js operation
	StaticBundleJsHandler static.BundleJsHandler
	// TodoCreateTodoHandler sets the operation handler for the create todo operation
	TodoCreateTodoHandler todo.CreateTodoHandler
	// TodoDeleteTodoHandler sets the operation handler for the delete todo operation
	TodoDeleteTodoHandler todo.DeleteTodoHandler
	// TodoGetTodoHandler sets the operation handler for the get todo operation
	TodoGetTodoHandler todo.GetTodoHandler
	// StaticIndexHTMLHandler sets the operation handler for the index HTML operation
	StaticIndexHTMLHandler static.IndexHTMLHandler
	// TodoListTodosHandler sets the operation handler for the list todos operation
	TodoListTodosHandler todo.ListTodosHandler
	// PingPingHandler sets the operation handler for the ping operation
	PingPingHandler ping.PingHandler
	// TodoUpdateTodoHandler sets the operation handler for the update todo operation
	TodoUpdateTodoHandler todo.UpdateTodoHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup
	CustomOptions            struct {
		ConfigFile string `long:"config" description:"the configuration file"`
	}
	DB     *xorm.Engine
	Logger *zap.Logger
}

// SetDefaultProduces sets the default produces media type
func (o *TodomvcAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *TodomvcAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *TodomvcAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *TodomvcAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *TodomvcAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *TodomvcAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *TodomvcAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the TodomvcAPI
func (o *TodomvcAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.HTMLProducer == nil {
		unregistered = append(unregistered, "HTMLProducer")
	}

	if o.JsProducer == nil {
		unregistered = append(unregistered, "JsProducer")
	}

	if o.StaticBundleJsHandler == nil {
		unregistered = append(unregistered, "static.BundleJsHandler")
	}

	if o.TodoCreateTodoHandler == nil {
		unregistered = append(unregistered, "todo.CreateTodoHandler")
	}

	if o.TodoDeleteTodoHandler == nil {
		unregistered = append(unregistered, "todo.DeleteTodoHandler")
	}

	if o.TodoGetTodoHandler == nil {
		unregistered = append(unregistered, "todo.GetTodoHandler")
	}

	if o.StaticIndexHTMLHandler == nil {
		unregistered = append(unregistered, "static.IndexHTMLHandler")
	}

	if o.TodoListTodosHandler == nil {
		unregistered = append(unregistered, "todo.ListTodosHandler")
	}

	if o.PingPingHandler == nil {
		unregistered = append(unregistered, "ping.PingHandler")
	}

	if o.TodoUpdateTodoHandler == nil {
		unregistered = append(unregistered, "todo.UpdateTodoHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *TodomvcAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *TodomvcAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *TodomvcAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *TodomvcAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/vnd.laincloud.todomvc.v1+json":
			result["application/vnd.laincloud.todomvc.v1+json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *TodomvcAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/vnd.laincloud.todomvc.v1+json":
			result["application/vnd.laincloud.todomvc.v1+json"] = o.JSONProducer

		case "text/html":
			result["text/html"] = o.HTMLProducer

		case "text/javascript":
			result["text/javascript"] = o.JsProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *TodomvcAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the todomvc API
func (o *TodomvcAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *TodomvcAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/bundle.js"] = static.NewBundleJs(o.context, o.StaticBundleJsHandler, o.DB, o.Logger)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/todos"] = todo.NewCreateTodo(o.context, o.TodoCreateTodoHandler, o.DB, o.Logger)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/todos/{id}"] = todo.NewDeleteTodo(o.context, o.TodoDeleteTodoHandler, o.DB, o.Logger)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/todos/{id}"] = todo.NewGetTodo(o.context, o.TodoGetTodoHandler, o.DB, o.Logger)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"][""] = static.NewIndexHTML(o.context, o.StaticIndexHTMLHandler, o.DB, o.Logger)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/todos"] = todo.NewListTodos(o.context, o.TodoListTodosHandler, o.DB, o.Logger)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ping"] = ping.NewPing(o.context, o.PingPingHandler, o.DB, o.Logger)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/todos/{id}"] = todo.NewUpdateTodo(o.context, o.TodoUpdateTodoHandler, o.DB, o.Logger)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *TodomvcAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *TodomvcAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
