// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"fmt"
	"io"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	_ "github.com/go-sql-driver/mysql"
	"github.com/go-xorm/xorm"
	"github.com/laincloud/todomvc/config"
	"github.com/laincloud/todomvc/handler"
	"github.com/laincloud/todomvc/util"
	graceful "github.com/tylerb/graceful"
	"go.uber.org/zap"

	"github.com/laincloud/todomvc/gen/restapi/operations"
	"github.com/laincloud/todomvc/gen/restapi/operations/ping"
	"github.com/laincloud/todomvc/gen/restapi/operations/static"
	"github.com/laincloud/todomvc/gen/restapi/operations/todo"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target ../gen --name todomvc --spec ../swagger.yml --template-dir go-swagger-gen-templates/

func configureFlags(api *operations.TodomvcAPI) {
	api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{
		swag.CommandLineOptionsGroup{
			ShortDescription: "Custom options",
			LongDescription:  "",
			Options:          &api.CustomOptions,
		},
	}
}

func configureAPI(api *operations.TodomvcAPI) (http.Handler, error) {
	if api.CustomOptions.ConfigFile == "" {
		return nil, fmt.Errorf("api.CustomOptions.ConfigFile == \"\"")
	}

	c, err := config.New(api.CustomOptions.ConfigFile)
	if err != nil {
		return nil, err
	}

	db, err := xorm.NewEngine("mysql", c.MySQL.DataSourceName())
	if err != nil {
		return nil, err
	}

	api.DB = db

	logger, err := zap.NewProduction()
	if err != nil {
		return nil, err
	}

	api.Logger = logger

	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.HTMLProducer = runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
		return errors.NotImplemented("html producer has not yet been implemented")
	})
	api.JsProducer = runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
		return errors.NotImplemented("js producer has not yet been implemented")
	})

	api.StaticBundleJsHandler = static.BundleJsHandlerFunc(func(params static.BundleJsParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
		return handler.BundleJs(params, db, logger)
	})
	api.TodoCreateTodoHandler = todo.CreateTodoHandlerFunc(func(params todo.CreateTodoParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
		return handler.CreateTodo(params, db, logger)
	})
	api.TodoDeleteTodoHandler = todo.DeleteTodoHandlerFunc(func(params todo.DeleteTodoParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
		return handler.DeleteTodo(params, db, logger)
	})
	api.TodoGetTodoHandler = todo.GetTodoHandlerFunc(func(params todo.GetTodoParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
		return handler.GetTodo(params, db, logger)
	})
	api.StaticIndexHTMLHandler = static.IndexHTMLHandlerFunc(func(params static.IndexHTMLParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
		return handler.IndexHTML(params, db, logger)
	})
	api.TodoListTodosHandler = todo.ListTodosHandlerFunc(func(params todo.ListTodosParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
		return handler.ListTodos(params, db, logger)
	})
	api.PingPingHandler = ping.PingHandlerFunc(func(params ping.PingParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
		return handler.Ping(params, db, logger)
	})
	api.TodoUpdateTodoHandler = todo.UpdateTodoHandlerFunc(func(params todo.UpdateTodoParams, db *xorm.Engine, logger *zap.Logger) middleware.Responder {
		return handler.UpdateTodo(params, db, logger)
	})

	api.ServerShutdown = func() {
		if api.DB != nil {
			if err1 := api.DB.Close(); err1 != nil {
				api.Logger.Error("api.DB.Close() failed.", zap.Error(err1))
			}
		}
		api.Logger.Sync()
	}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares), logger), nil
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler, logger *zap.Logger) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		requestID := util.NewRequestID()
		r = r.WithContext(util.NewContext(r.Context(), requestID))
		logger.Info("Receive a request.",
			zap.String("RequestID", requestID),
			zap.String("URL", r.URL.String()),
			zap.String("Method", r.Method),
			zap.Any("Header", r.Header),
			zap.String("RemoteAddr", r.RemoteAddr),
		)
		handler.ServeHTTP(w, r)
		logger.Info("Response has been sent.",
			zap.String("RequestID", requestID),
			zap.String("URL", r.URL.String()),
			zap.String("Method", r.Method),
			zap.Any("Header", r.Header),
			zap.String("RemoteAddr", r.RemoteAddr),
		)
	})
}
